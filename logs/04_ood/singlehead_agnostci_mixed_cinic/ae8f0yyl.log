{'deploy': True, 'tag': '04_ood/singlehead_agnostci_mixed_cinic', 'seed': 10, 'device': 'cuda:0', 'reps': 10, 'loss': {'alpha': 0.5, 'tune_alpha': False, 'group_task_loss': False}, 'task': {'dataset': 'cinic_img', 'task_map': [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]], 'target': 0, 'ood': [4], 'augment': False, 'n': 10, 'm_n': 1, 'beta': 0.5, 'custom_sampler': False, 'num_cinic': 200}, 'hp': {'epochs': 100, 'bs': 16, 'lr': 0.01}, 'net': 'conv'}
Files already downloaded and verified
Files already downloaded and verified
{'epoch': 1, 'train_loss': 2.33, 'train_acc': 0.165}
{'epoch': 2, 'train_loss': 1.7301, 'train_acc': 0.42}
{'epoch': 3, 'train_loss': 1.2796, 'train_acc': 0.55}
{'epoch': 4, 'train_loss': 0.8971, 'train_acc': 0.76}
{'epoch': 5, 'train_loss': 0.5155, 'train_acc': 0.88}
{'epoch': 6, 'train_loss': 0.2869, 'train_acc': 0.96}
{'epoch': 7, 'train_loss': 0.1266, 'train_acc': 1.0}
{'epoch': 8, 'train_loss': 0.0758, 'train_acc': 0.995}
{'epoch': 9, 'train_loss': 0.0463, 'train_acc': 1.0}
{'epoch': 10, 'train_loss': 0.0282, 'train_acc': 1.0}
{'epoch': 11, 'train_loss': 0.0205, 'train_acc': 1.0}
{'epoch': 12, 'train_loss': 0.0181, 'train_acc': 1.0}
{'epoch': 13, 'train_loss': 0.0139, 'train_acc': 1.0}
{'epoch': 14, 'train_loss': 0.0123, 'train_acc': 1.0}
{'epoch': 15, 'train_loss': 0.0105, 'train_acc': 1.0}
{'epoch': 16, 'train_loss': 0.0087, 'train_acc': 1.0}
{'epoch': 17, 'train_loss': 0.0075, 'train_acc': 1.0}
{'epoch': 18, 'train_loss': 0.0074, 'train_acc': 1.0}
{'epoch': 19, 'train_loss': 0.0074, 'train_acc': 1.0}
{'epoch': 20, 'train_loss': 0.0062, 'train_acc': 1.0}
{'epoch': 21, 'train_loss': 0.0061, 'train_acc': 1.0}
{'epoch': 22, 'train_loss': 0.0052, 'train_acc': 1.0}
{'epoch': 23, 'train_loss': 0.0056, 'train_acc': 1.0}
{'epoch': 24, 'train_loss': 0.0051, 'train_acc': 1.0}
{'epoch': 25, 'train_loss': 0.0049, 'train_acc': 1.0}
{'epoch': 26, 'train_loss': 0.0045, 'train_acc': 1.0}
{'epoch': 27, 'train_loss': 0.0043, 'train_acc': 1.0}
{'epoch': 28, 'train_loss': 0.0041, 'train_acc': 1.0}
{'epoch': 29, 'train_loss': 0.004, 'train_acc': 1.0}
{'epoch': 30, 'train_loss': 0.0034, 'train_acc': 1.0}
{'epoch': 31, 'train_loss': 0.0037, 'train_acc': 1.0}
{'epoch': 32, 'train_loss': 0.0032, 'train_acc': 1.0}
{'epoch': 33, 'train_loss': 0.0032, 'train_acc': 1.0}
{'epoch': 34, 'train_loss': 0.0033, 'train_acc': 1.0}
{'epoch': 35, 'train_loss': 0.0032, 'train_acc': 1.0}
{'epoch': 36, 'train_loss': 0.003, 'train_acc': 1.0}
{'epoch': 37, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 38, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 39, 'train_loss': 0.0026, 'train_acc': 1.0}
{'epoch': 40, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 41, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 42, 'train_loss': 0.0033, 'train_acc': 1.0}
{'epoch': 43, 'train_loss': 0.0026, 'train_acc': 1.0}
{'epoch': 44, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 45, 'train_loss': 0.0025, 'train_acc': 1.0}
{'epoch': 46, 'train_loss': 0.0025, 'train_acc': 1.0}
{'epoch': 47, 'train_loss': 0.0027, 'train_acc': 1.0}
{'epoch': 48, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 49, 'train_loss': 0.0028, 'train_acc': 1.0}
{'epoch': 50, 'train_loss': 0.0025, 'train_acc': 1.0}
{'epoch': 51, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 52, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 53, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 54, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 55, 'train_loss': 0.0028, 'train_acc': 1.0}
{'epoch': 56, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 57, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 58, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 59, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 60, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 61, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 62, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 63, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 64, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 65, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 66, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 67, 'train_loss': 0.0025, 'train_acc': 1.0}
{'epoch': 68, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 69, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 70, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 71, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 72, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 73, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 74, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 75, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 76, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 77, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 78, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 79, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 80, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 81, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 82, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 83, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 84, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 85, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 86, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 87, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 88, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 89, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 90, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 91, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 92, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 93, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 94, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 95, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 96, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 97, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 98, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 99, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 100, 'train_loss': 0.0018, 'train_acc': 1.0}
{'run_num': 0, 'final_test_err': 0.6704}
Files already downloaded and verified
Files already downloaded and verified
{'epoch': 1, 'train_loss': 2.2646, 'train_acc': 0.175}
{'epoch': 2, 'train_loss': 1.6408, 'train_acc': 0.41}
{'epoch': 3, 'train_loss': 1.2245, 'train_acc': 0.55}
{'epoch': 4, 'train_loss': 0.8677, 'train_acc': 0.685}
{'epoch': 5, 'train_loss': 0.5702, 'train_acc': 0.865}
{'epoch': 6, 'train_loss': 0.3317, 'train_acc': 0.97}
{'epoch': 7, 'train_loss': 0.169, 'train_acc': 1.0}
{'epoch': 8, 'train_loss': 0.0812, 'train_acc': 1.0}
{'epoch': 9, 'train_loss': 0.0453, 'train_acc': 1.0}
{'epoch': 10, 'train_loss': 0.0257, 'train_acc': 1.0}
{'epoch': 11, 'train_loss': 0.0209, 'train_acc': 1.0}
{'epoch': 12, 'train_loss': 0.0151, 'train_acc': 1.0}
{'epoch': 13, 'train_loss': 0.0143, 'train_acc': 1.0}
{'epoch': 14, 'train_loss': 0.0103, 'train_acc': 1.0}
{'epoch': 15, 'train_loss': 0.009, 'train_acc': 1.0}
{'epoch': 16, 'train_loss': 0.0087, 'train_acc': 1.0}
{'epoch': 17, 'train_loss': 0.0079, 'train_acc': 1.0}
{'epoch': 18, 'train_loss': 0.0062, 'train_acc': 1.0}
{'epoch': 19, 'train_loss': 0.0063, 'train_acc': 1.0}
{'epoch': 20, 'train_loss': 0.0058, 'train_acc': 1.0}
{'epoch': 21, 'train_loss': 0.0061, 'train_acc': 1.0}
{'epoch': 22, 'train_loss': 0.0054, 'train_acc': 1.0}
{'epoch': 23, 'train_loss': 0.0052, 'train_acc': 1.0}
{'epoch': 24, 'train_loss': 0.0049, 'train_acc': 1.0}
{'epoch': 25, 'train_loss': 0.0046, 'train_acc': 1.0}
{'epoch': 26, 'train_loss': 0.0046, 'train_acc': 1.0}
{'epoch': 27, 'train_loss': 0.0041, 'train_acc': 1.0}
{'epoch': 28, 'train_loss': 0.0037, 'train_acc': 1.0}
{'epoch': 29, 'train_loss': 0.0035, 'train_acc': 1.0}
{'epoch': 30, 'train_loss': 0.0044, 'train_acc': 1.0}
{'epoch': 31, 'train_loss': 0.0036, 'train_acc': 1.0}
{'epoch': 32, 'train_loss': 0.0037, 'train_acc': 1.0}
{'epoch': 33, 'train_loss': 0.0033, 'train_acc': 1.0}
{'epoch': 34, 'train_loss': 0.0035, 'train_acc': 1.0}
{'epoch': 35, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 36, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 37, 'train_loss': 0.0026, 'train_acc': 1.0}
{'epoch': 38, 'train_loss': 0.003, 'train_acc': 1.0}
{'epoch': 39, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 40, 'train_loss': 0.0028, 'train_acc': 1.0}
{'epoch': 41, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 42, 'train_loss': 0.0026, 'train_acc': 1.0}
{'epoch': 43, 'train_loss': 0.0028, 'train_acc': 1.0}
{'epoch': 44, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 45, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 46, 'train_loss': 0.0025, 'train_acc': 1.0}
{'epoch': 47, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 48, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 49, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 50, 'train_loss': 0.0025, 'train_acc': 1.0}
{'epoch': 51, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 52, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 53, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 54, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 55, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 56, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 57, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 58, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 59, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 60, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 61, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 62, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 63, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 64, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 65, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 66, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 67, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 68, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 69, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 70, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 71, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 72, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 73, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 74, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 75, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 76, 'train_loss': 0.0015, 'train_acc': 1.0}
{'epoch': 77, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 78, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 79, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 80, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 81, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 82, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 83, 'train_loss': 0.0015, 'train_acc': 1.0}
{'epoch': 84, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 85, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 86, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 87, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 88, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 89, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 90, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 91, 'train_loss': 0.0014, 'train_acc': 1.0}
{'epoch': 92, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 93, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 94, 'train_loss': 0.0015, 'train_acc': 1.0}
{'epoch': 95, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 96, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 97, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 98, 'train_loss': 0.0014, 'train_acc': 1.0}
{'epoch': 99, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 100, 'train_loss': 0.0015, 'train_acc': 1.0}
{'run_num': 1, 'final_test_err': 0.6632}
Files already downloaded and verified
Files already downloaded and verified
{'epoch': 1, 'train_loss': 2.3143, 'train_acc': 0.195}
{'epoch': 2, 'train_loss': 1.6917, 'train_acc': 0.405}
{'epoch': 3, 'train_loss': 1.2942, 'train_acc': 0.55}
{'epoch': 4, 'train_loss': 0.9761, 'train_acc': 0.66}
{'epoch': 5, 'train_loss': 0.6456, 'train_acc': 0.84}
{'epoch': 6, 'train_loss': 0.3608, 'train_acc': 0.93}
{'epoch': 7, 'train_loss': 0.2043, 'train_acc': 0.98}
{'epoch': 8, 'train_loss': 0.1265, 'train_acc': 0.995}
{'epoch': 9, 'train_loss': 0.0633, 'train_acc': 1.0}
{'epoch': 10, 'train_loss': 0.0362, 'train_acc': 1.0}
{'epoch': 11, 'train_loss': 0.0282, 'train_acc': 1.0}
{'epoch': 12, 'train_loss': 0.027, 'train_acc': 1.0}
{'epoch': 13, 'train_loss': 0.0188, 'train_acc': 1.0}
{'epoch': 14, 'train_loss': 0.0131, 'train_acc': 1.0}
{'epoch': 15, 'train_loss': 0.0141, 'train_acc': 1.0}
{'epoch': 16, 'train_loss': 0.0114, 'train_acc': 1.0}
{'epoch': 17, 'train_loss': 0.0105, 'train_acc': 1.0}
{'epoch': 18, 'train_loss': 0.009, 'train_acc': 1.0}
{'epoch': 19, 'train_loss': 0.0086, 'train_acc': 1.0}
{'epoch': 20, 'train_loss': 0.0075, 'train_acc': 1.0}
{'epoch': 21, 'train_loss': 0.0075, 'train_acc': 1.0}
{'epoch': 22, 'train_loss': 0.0063, 'train_acc': 1.0}
{'epoch': 23, 'train_loss': 0.0061, 'train_acc': 1.0}
{'epoch': 24, 'train_loss': 0.0055, 'train_acc': 1.0}
{'epoch': 25, 'train_loss': 0.0055, 'train_acc': 1.0}
{'epoch': 26, 'train_loss': 0.0047, 'train_acc': 1.0}
{'epoch': 27, 'train_loss': 0.0048, 'train_acc': 1.0}
{'epoch': 28, 'train_loss': 0.0041, 'train_acc': 1.0}
{'epoch': 29, 'train_loss': 0.0042, 'train_acc': 1.0}
{'epoch': 30, 'train_loss': 0.0043, 'train_acc': 1.0}
{'epoch': 31, 'train_loss': 0.0039, 'train_acc': 1.0}
{'epoch': 32, 'train_loss': 0.0039, 'train_acc': 1.0}
{'epoch': 33, 'train_loss': 0.0039, 'train_acc': 1.0}
{'epoch': 34, 'train_loss': 0.0038, 'train_acc': 1.0}
{'epoch': 35, 'train_loss': 0.0041, 'train_acc': 1.0}
{'epoch': 36, 'train_loss': 0.0032, 'train_acc': 1.0}
{'epoch': 37, 'train_loss': 0.0031, 'train_acc': 1.0}
{'epoch': 38, 'train_loss': 0.003, 'train_acc': 1.0}
{'epoch': 39, 'train_loss': 0.0031, 'train_acc': 1.0}
{'epoch': 40, 'train_loss': 0.003, 'train_acc': 1.0}
{'epoch': 41, 'train_loss': 0.0031, 'train_acc': 1.0}
{'epoch': 42, 'train_loss': 0.0033, 'train_acc': 1.0}
{'epoch': 43, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 44, 'train_loss': 0.003, 'train_acc': 1.0}
{'epoch': 45, 'train_loss': 0.0025, 'train_acc': 1.0}
{'epoch': 46, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 47, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 48, 'train_loss': 0.0029, 'train_acc': 1.0}
{'epoch': 49, 'train_loss': 0.0031, 'train_acc': 1.0}
{'epoch': 50, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 51, 'train_loss': 0.0027, 'train_acc': 1.0}
{'epoch': 52, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 53, 'train_loss': 0.0028, 'train_acc': 1.0}
{'epoch': 54, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 55, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 56, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 57, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 58, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 59, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 60, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 61, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 62, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 63, 'train_loss': 0.0026, 'train_acc': 1.0}
{'epoch': 64, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 65, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 66, 'train_loss': 0.0023, 'train_acc': 1.0}
{'epoch': 67, 'train_loss': 0.003, 'train_acc': 1.0}
{'epoch': 68, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 69, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 70, 'train_loss': 0.002, 'train_acc': 1.0}
{'epoch': 71, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 72, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 73, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 74, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 75, 'train_loss': 0.0024, 'train_acc': 1.0}
{'epoch': 76, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 77, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 78, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 79, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 80, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 81, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 82, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 83, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 84, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 85, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 86, 'train_loss': 0.0021, 'train_acc': 1.0}
{'epoch': 87, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 88, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 89, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 90, 'train_loss': 0.0016, 'train_acc': 1.0}
{'epoch': 91, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 92, 'train_loss': 0.0017, 'train_acc': 1.0}
{'epoch': 93, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 94, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 95, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 96, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 97, 'train_loss': 0.0018, 'train_acc': 1.0}
{'epoch': 98, 'train_loss': 0.0019, 'train_acc': 1.0}
{'epoch': 99, 'train_loss': 0.0022, 'train_acc': 1.0}
{'epoch': 100, 'train_loss': 0.0017, 'train_acc': 1.0}
{'run_num': 2, 'final_test_err': 0.6751}
Files already downloaded and verified
Files already downloaded and verified
{'epoch': 1, 'train_loss': 2.3235, 'train_acc': 0.185}
{'epoch': 2, 'train_loss': 1.6982, 'train_acc': 0.42}
{'epoch': 3, 'train_loss': 1.2619, 'train_acc': 0.565}
{'epoch': 4, 'train_loss': 1.0058, 'train_acc': 0.67}
{'epoch': 5, 'train_loss': 0.7476, 'train_acc': 0.765}
{'epoch': 6, 'train_loss': 0.4274, 'train_acc': 0.925}
{'epoch': 7, 'train_loss': 0.2376, 'train_acc': 0.965}
{'epoch': 8, 'train_loss': 0.1547, 'train_acc': 0.985}
{'epoch': 9, 'train_loss': 0.1077, 'train_acc': 0.985}
{'epoch': 10, 'train_loss': 0.0645, 'train_acc': 1.0}
{'epoch': 11, 'train_loss': 0.034, 'train_acc': 1.0}
{'epoch': 12, 'train_loss': 0.0228, 'train_acc': 1.0}
{'epoch': 13, 'train_loss': 0.0186, 'train_acc': 1.0}
Traceback (most recent call last):
  File "/home/ubuntu/ood-tl/train_singlehead.py", line 103, in <module>
    main()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/main.py", line 49, in decorated_main
    _run_hydra(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 375, in _run_hydra
    run_and_report(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 211, in run_and_report
    return func()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 376, in <lambda>
    lambda: hydra.multirun(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 139, in multirun
    ret = sweeper.sweep(arguments=task_overrides)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/core_plugins/basic_sweeper.py", line 157, in sweep
    results = self.launcher.launch(batch, initial_job_idx=initial_job_idx)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/core_plugins/basic_launcher.py", line 74, in launch
    ret = run_job(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/core/utils.py", line 160, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/ubuntu/ood-tl/train_singlehead.py", line 88, in main
    train(cfg, net, dataloaders[0])
  File "/home/ubuntu/ood-tl/utils/run_net.py", line 37, in train
    for dat, target in trainloader:
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 368, in __iter__
    return self._get_iterator()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 314, in _get_iterator
    return _MultiProcessingDataLoaderIter(self)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 900, in __init__
    self._worker_result_queue = multiprocessing_context.Queue()  # type: ignore[var-annotated]
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/context.py", line 103, in Queue
    return Queue(maxsize, ctx=self.get_context())
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/queues.py", line 43, in __init__
    self._rlock = ctx.Lock()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/context.py", line 68, in Lock
    return Lock(ctx=self.get_context())
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/synchronize.py", line 162, in __init__
    SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/synchronize.py", line 57, in __init__
    sl = self._semlock = _multiprocessing.SemLock(
KeyboardInterrupt
Traceback (most recent call last):
  File "/home/ubuntu/ood-tl/train_singlehead.py", line 103, in <module>
    main()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/main.py", line 49, in decorated_main
    _run_hydra(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 375, in _run_hydra
    run_and_report(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 211, in run_and_report
    return func()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 376, in <lambda>
    lambda: hydra.multirun(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 139, in multirun
    ret = sweeper.sweep(arguments=task_overrides)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/core_plugins/basic_sweeper.py", line 157, in sweep
    results = self.launcher.launch(batch, initial_job_idx=initial_job_idx)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/core_plugins/basic_launcher.py", line 74, in launch
    ret = run_job(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/core/utils.py", line 160, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/ubuntu/ood-tl/train_singlehead.py", line 88, in main
    train(cfg, net, dataloaders[0])
  File "/home/ubuntu/ood-tl/utils/run_net.py", line 37, in train
    for dat, target in trainloader:
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 368, in __iter__
    return self._get_iterator()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 314, in _get_iterator
    return _MultiProcessingDataLoaderIter(self)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 900, in __init__
    self._worker_result_queue = multiprocessing_context.Queue()  # type: ignore[var-annotated]
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/context.py", line 103, in Queue
    return Queue(maxsize, ctx=self.get_context())
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/queues.py", line 43, in __init__
    self._rlock = ctx.Lock()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/context.py", line 68, in Lock
    return Lock(ctx=self.get_context())
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/synchronize.py", line 162, in __init__
    SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/synchronize.py", line 57, in __init__
    sl = self._semlock = _multiprocessing.SemLock(
KeyboardInterrupt
Traceback (most recent call last):
  File "/home/ubuntu/ood-tl/train_singlehead.py", line 103, in <module>
    main()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/main.py", line 49, in decorated_main
    _run_hydra(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 375, in _run_hydra
    run_and_report(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 211, in run_and_report
    return func()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/utils.py", line 376, in <lambda>
    lambda: hydra.multirun(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/hydra.py", line 139, in multirun
    ret = sweeper.sweep(arguments=task_overrides)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/core_plugins/basic_sweeper.py", line 157, in sweep
    results = self.launcher.launch(batch, initial_job_idx=initial_job_idx)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/_internal/core_plugins/basic_launcher.py", line 74, in launch
    ret = run_job(
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/hydra/core/utils.py", line 160, in run_job
    ret.return_value = task_function(task_cfg)
  File "/home/ubuntu/ood-tl/train_singlehead.py", line 88, in main
    train(cfg, net, dataloaders[0])
  File "/home/ubuntu/ood-tl/utils/run_net.py", line 37, in train
    for dat, target in trainloader:
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 368, in __iter__
    return self._get_iterator()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 314, in _get_iterator
    return _MultiProcessingDataLoaderIter(self)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 900, in __init__
    self._worker_result_queue = multiprocessing_context.Queue()  # type: ignore[var-annotated]
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/context.py", line 103, in Queue
    return Queue(maxsize, ctx=self.get_context())
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/queues.py", line 43, in __init__
    self._rlock = ctx.Lock()
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/context.py", line 68, in Lock
    return Lock(ctx=self.get_context())
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/synchronize.py", line 162, in __init__
    SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)
  File "/home/ubuntu/tools/miniconda3/envs/manifold/lib/python3.9/multiprocessing/synchronize.py", line 57, in __init__
    sl = self._semlock = _multiprocessing.SemLock(
KeyboardInterrupt

wandb: Waiting for W&B process to finish, PID 13766... (failed 255). Press ctrl-c to abort syncing.
wandb: - 0.00MB of 0.00MB uploaded (0.00MB deduped)wandb: \ 0.00MB of 0.00MB uploaded (0.00MB deduped)wandb: | 0.00MB of 0.01MB uploaded (0.00MB deduped)wandb: / 0.01MB of 0.01MB uploaded (0.00MB deduped)wandb: - 0.01MB of 0.01MB uploaded (0.00MB deduped)wandb: \ 0.01MB of 0.01MB uploaded (0.00MB deduped)wandb: | 0.01MB of 0.01MB uploaded (0.00MB deduped)wandb: / 0.01MB of 0.01MB uploaded (0.00MB deduped)wandb: - 0.01MB of 0.01MB uploaded (0.00MB deduped)wandb:                                                                                
wandb: ERROR Control-C detected -- Run data was not synced
